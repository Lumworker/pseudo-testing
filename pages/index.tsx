import { useMemo } from 'react';
import { useForm, Controller } from 'react-hook-form';
import type { NextPage } from 'next';
import { buildPyramid } from '../utils/pyramidGenerator'; 

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Type ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Form Data
type FormData = {
  rows: string;
};

const PyramidTestingPage: NextPage = () => {
  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ useForm ‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î Default Values ‡πÄ‡∏õ‡πá‡∏ô string
  const { control, watch, formState: { errors } } = useForm<FormData>({
    defaultValues: { rows: '5' },
  });

  // ‡πÉ‡∏ä‡πâ watch ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡πà‡∏≤ Input ‡πÅ‡∏ö‡∏ö Real-time (‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô string)
  const watchedRowsString = watch('rows');
  
  // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å string ‡πÄ‡∏õ‡πá‡∏ô number ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
  const parsedRows = parseInt(watchedRowsString);
  const currentRows = (parsedRows && Number.isInteger(parsedRows) && parsedRows >= 1) ? parsedRows : 0;

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Output ‡∏û‡∏µ‡∏£‡∏∞‡∏°‡∏¥‡∏î
  const pyramidOutput: string = useMemo(() => {
    return buildPyramid(currentRows);
  }, [currentRows]);

  // Logic ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Error Message 
  const displayError = errors.rows?.message;

  return (
    // Responsive Layout
    <div className="min-h-screen flex flex-col items-center justify-center bg-gray-50 p-4 sm:p-10 font-sans">
      
      <main className="w-full max-w-5xl bg-white p-6 sm:p-10 rounded-2xl shadow-2xl transition duration-300">
        
        <h1 className="text-4xl sm:text-5xl font-extrabold text-gray-900 mb-2">
            Pyramid Generator
        </h1>
        <p className="text-blue-500 mb-10 text-lg">Project: **pseudo-testing** (RHF + TS + Tailwind)</p>
        
        {/* ‡∏™‡πà‡∏ß‡∏ô Input Control */}
        <div className="mb-8 p-6 bg-blue-50 border border-blue-200 rounded-xl shadow-md">
          <label htmlFor="rowsInput" className="block text-xl font-semibold text-blue-800 mb-3">
            ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î (Rows)
          </label>
          <div className="flex justify-center">
            
            <Controller
              name="rows"
              control={control}
              rules={{
                required: '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î',
                
                // üí° ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Regex ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
                // /^\d+$/ ‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á: ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç (\d) ‡πÅ‡∏•‡∏∞‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏ï‡∏±‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ (+) ‡∏à‡∏ô‡∏à‡∏ö ($)
                pattern: { 
                    value: /^\d+$/, 
                    message: '‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 0-9 ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô' 
                },
                
                // üí° ‡πÉ‡∏ä‡πâ Validate ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡πà‡∏ß‡∏á‡∏Ñ‡πà‡∏≤, ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°, ‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô 0
                validate: value => {
                    const numValue = parseInt(value);
                    if (numValue === 0) return '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0';
                    if (numValue < 1) return '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1';
                    if (numValue > 25) return '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Å‡∏¥‡∏ô 25';
                    if (!Number.isInteger(numValue)) return '‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô';
                    return true;
                }
              }}
              render={({ field }) => (
                <input
                  {...field}
                  id="rowsInput"
                  type="text" 
                  placeholder="‡πÄ‡∏ä‡πà‡∏ô: 5"
                  className={`
                    p-3 w-40 text-2xl text-center font-mono border-2 rounded-lg 
                    shadow-xl focus:outline-none focus:ring-4 transition duration-200 
                    
                    bg-gray-800 text-white placeholder-gray-400 
                    
                    ${displayError 
                        ? 'border-red-500 ring-red-200 bg-red-800 text-white' 
                        : 'border-gray-600 focus:border-blue-400 focus:ring-blue-300'
                    }
                  `}
                />
              )}
            />
          </div>
          
          {/* ‡πÅ‡∏™‡∏î‡∏á Error Message ‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏à‡∏≤‡∏Å React Hook Form */}
          {displayError && <p className="text-red-600 mt-3 text-sm font-semibold">{displayError}</p>}
        </div>

        <hr className="my-8 border-t-2 border-blue-100" />

        {/* ‡∏™‡πà‡∏ß‡∏ô Output Display */}
        <h2 className="text-3xl font-bold mb-4 text-gray-700">Output ({currentRows} Rows)</h2>
        
        <div className="flex justify-center overflow-x-auto p-2">
          {/* ‡πÉ‡∏ä‡πâ <pre> ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ü‡∏≠‡∏ô‡∏ï‡πå Monospace */}
          <pre className="
            text-xs sm:text-sm lg:text-lg 
            font-mono 
            bg-gray-800 
            text-yellow-300 
            p-6 sm:p-8 
            border border-gray-700 
            rounded-xl 
            shadow-2xl 
            text-left 
            leading-tight
            whitespace-pre
            w-full max-w-full 
          ">
            {pyramidOutput}
          </pre>
        </div>

      </main>
      
      <footer className="mt-8 text-gray-500 text-sm">
      </footer>
      
    </div>
  );
}

export default PyramidTestingPage;